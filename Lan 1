/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

//UART TX-RX _TRANSMIT 
#define UART_TRANSMIT                0xA5
#define UART_RECEIVE                 0x5A

#define UART_DEFAULT                 0x00
#define UART_DEFAULT_LED             0x63

#define UART_RGBC                    0x51
#define UART_EZ_COLOR                0x52
#define UART_MCU_RGB                 0x54

#define UART_BAUD_9600               0xAE
#define UART_BAUD_115200             0xAF

#define UART_CALIB_WHITE             0xBB

//GENERAL _RECEIVE
#define COLOR_BLUE              0x08 
#define COLOR_NAVY_BLUE         0x07 
#define COLOR_GREEN             0x06 
#define COLOR_BLACK             0x05 
#define COLOR_WHITE             0x04 
#define COLOR_PINK              0x03 
#define COLOR_YELLOW            0x02 
#define COLOR_RED               0x01

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t tx_buff[]="Hello";
uint8_t rx_buff[13];
unsigned char flag;
unsigned char  u8_DataSet[3];
unsigned char u16_DataGet[4];


#define BUFFER_SIZE 13

uint8_t data[BUFFER_SIZE]; // Luu chu?i 13 byte
volatile uint8_t index = 0; // Ch? s? cho buffer
volatile uint8_t data_ready = 0; // C? báo hi?u d? li?u dã s?n sàng
uint16_t red;
uint16_t green ;
uint16_t blue;
uint16_t clear_data ;

void TCS347GY33V1_Init()
{
	flag = 0;
	if(flag == 0)
	{
		u8_DataSet[0]= UART_TRANSMIT;
		u8_DataSet[1]= UART_DEFAULT;
		u8_DataSet[2]= u8_DataSet[0]+u8_DataSet[1];
		flag++;
	}
	else if (flag == 1)
	{
		u8_DataSet[0]= UART_TRANSMIT;
		u8_DataSet[1]= UART_BAUD_9600;
		u8_DataSet[2]= u8_DataSet[0]+u8_DataSet[1];
		flag++;
	}
	else 
	{
		u8_DataSet[0]= UART_TRANSMIT;
		u8_DataSet[1]= UART_DEFAULT_LED;
		u8_DataSet[2]= u8_DataSet[0]+u8_DataSet[1];
		flag = 0;
	}
}

void TCS347GY33V1_Command(unsigned char a)
{
		u8_DataSet[0]= UART_TRANSMIT;
		u8_DataSet[1]= a;
		u8_DataSet[2]= u8_DataSet[0]+u8_DataSet[1];
}

void TCS347GY33V1_Analyze(unsigned char a, unsigned char u8_DataReceive[13])
{
	if (a == UART_RGBC)
	{
		u16_DataGet[0] = u8_DataReceive[4];
		u16_DataGet[0] = (u16_DataGet[0]<<8)|u8_DataReceive[5];
		u16_DataGet[1] = u8_DataReceive[6];
		u16_DataGet[1] = (u16_DataGet[1]<<8)|u8_DataReceive[7];
		u16_DataGet[2] = u8_DataReceive[8];
		u16_DataGet[2] = (u16_DataGet[2]<<8)|u8_DataReceive[9];
		u16_DataGet[3] = u8_DataReceive[10];
		u16_DataGet[3] = (u16_DataGet[2]<<8)|u8_DataReceive[11];
	}
	if (a == UART_EZ_COLOR)
	{
		u16_DataGet[0] = u8_DataReceive[4];
		u16_DataGet[0] = (u16_DataGet[0]<<8)|u8_DataReceive[5];
		u16_DataGet[1] = u8_DataReceive[6];
		u16_DataGet[1] = (u16_DataGet[1]<<8)|u8_DataReceive[7];
		u16_DataGet[2] = u8_DataReceive[8];
		u16_DataGet[2] = (u16_DataGet[2]<<8)|u8_DataReceive[9];
		
	}
	if (a == UART_MCU_RGB)
	{
		u16_DataGet[0] = u8_DataReceive[5];
		u16_DataGet[1] = u8_DataReceive[6];
		u16_DataGet[2] = u8_DataReceive[7];
	}
}


void UART_Init(void) {
    // C?u hình UART (gi? d?nh s? d?ng STM32F1 v?i baud rate 9600)
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // B?t clock UART1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;   // B?t clock GPIOA
    
    GPIOA->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
    GPIOA->CRH |= GPIO_CRH_MODE9_1 | GPIO_CRH_CNF9_1; // PA9: UART TX
    GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
    GPIOA->CRH |= GPIO_CRH_CNF10_0; // PA10: UART RX

    USART1->BRR = 0x1D4C;  // Baud rate = 9600 (v?i clock 72 MHz)
    USART1->CR1 |= USART_CR1_RXNEIE | USART_CR1_TE | USART_CR1_RE | USART_CR1_UE; // B?t RX interrupt, TX, RX, UART enable
    
    NVIC_EnableIRQ(USART1_IRQn); // B?t ng?t UART1 trong NVIC
}

void UART_SendCommand(uint8_t command) {
    uint8_t checksum = (0xA5 + command) % 256; // Tính checksum
    while (!(USART1->SR & USART_SR_TXE)); // Ch? TXE s?n sàng
    USART1->DR = 0xA5; // G?i byte m? d?u
    while (!(USART1->SR & USART_SR_TXE));
    USART1->DR = command; // G?i l?nh
    while (!(USART1->SR & USART_SR_TXE));
    USART1->DR = checksum; // G?i checksum
}
/*
void USART1_IRQHandler(void) {
    if (USART1->SR & USART_SR_RXNE) { // Ki?m tra RXNE
        uint8_t byte = USART1->DR; // Ð?c byte nh?n du?c
        if (index < BUFFER_SIZE) {
            data[index++] = byte; // Luu byte vào buffer
            if (index == BUFFER_SIZE) {
                data_ready = 1; // Ð?t c? d? li?u s?n sàng
                index = 0; // Reset ch? s?
            }
        } else {
            index = 0; // Reset n?u buffer tràn
        }
    }
}
*/
void ProcessData(void) {
    red = (data[4] << 8) | data[5];
    green = (data[6] << 8) | data[7];
    blue = (data[8] << 8) | data[9];
    clear_data = (data[10] << 8) | data[11];

  
}
void read_colour(void) {
    // G?i l?nh yêu c?u d? li?u t? c?m bi?n
    UART_SendCommand(0x84); // L?nh 0x84 yêu c?u d?c màu
    
    // Ch? d? li?u tr? v? t? c?m bi?n (timeout t?i da 500ms)
    uint32_t timeout = 500; // Th?i gian ch? tính b?ng ms
    uint32_t start_time = HAL_GetTick(); // Ð?c th?i gian hi?n t?i
    while (!data_ready) { // C? data_ready du?c set trong USART1_IRQHandler
        if ((HAL_GetTick() - start_time) > timeout) {
        
            return;
        }
    }

    // Reset c? sau khi nh?n d? d? li?u
    data_ready = 0;
		
		if (data[0] == 0x5A && data[1] == 0x5A) {
        ProcessData();
    } 
}







/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, rx_buff, sizeof(rx_buff));
  HAL_UART_Transmit(&huart1, u8_DataSet, sizeof(u8_DataSet), 1000);
	HAL_Delay(1);
	flag = 1;
	TCS347GY33V1_Init();
	TCS347GY33V1_Command(UART_RGBC);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/*if (data_ready) { // N?u d? li?u s?n sàng
            data_ready = 0; // Reset c?
            if (data[0] == 0x5A && data[1] == 0x5A) { // Ki?m tra byte d?u
                ProcessData(); // X? lý d? li?u
      
        }
			}
		
		*/
		
		
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == huart1.Instance)
	{
		HAL_UART_Receive_IT(&huart1, rx_buff, sizeof(rx_buff));
		red = (rx_buff[4] << 8) | rx_buff[5];
    green = (rx_buff[6] << 8) | rx_buff[7];
    blue = (rx_buff[8] << 8) | rx_buff[9];
    clear_data = (rx_buff[10] << 8) | rx_buff[11];
	}

}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
